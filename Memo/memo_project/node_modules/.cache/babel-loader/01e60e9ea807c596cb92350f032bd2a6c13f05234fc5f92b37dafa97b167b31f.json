{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\OneDrive\\\\Desktop\\\\Zona mij\\\\Apprendimento\\\\React\\\\first-project\\\\src\\\\Components\\\\MyComponent.jsx\",\n  _s = $RefreshSig$();\n// src/MyComponent.jsx\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useColor } from './ColorContext';\nimport { darken } from 'polished';\nimport { IoMdAdd } from \"react-icons/io\";\nimport '../Css/MyComponent.css';\nimport '../Css/ColorPicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MainContainer() {\n  _s();\n  const containerRef = useRef(null);\n  const bgButtonRef = useRef(null);\n  const addBtnRef = useRef(null);\n  const {\n    color\n  } = useColor(); // Ottieni il colore dal contesto\n\n  useEffect(() => {\n    if (containerRef.current && bgButtonRef.current) {\n      const darkenedColor = darken(0.1, color);\n      containerRef.current.style.backgroundColor = color;\n      addBtnRef.current.style.backgroundColor = color;\n      bgButtonRef.current.style.backgroundColor = darkenedColor;\n    }\n  }, [color]);\n\n  // useState -> Stato iniziale dell'array (vuoto)\n  const [notes, setNotes] = useState(() => {\n    const savedNotes = localStorage.getItem('notes');\n    //Vera -> parsing delle note | falsa -> array vuoto\n    return savedNotes ? JSON.parse(savedNotes) : [];\n  });\n\n  // Funzione per aggiungere una nuova nota\n  const addNewNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: 'Titolo',\n      content: 'Scrivi qui'\n    };\n    setNotes([...notes, newNote]);\n  };\n\n  // Funzione per aggiornare una nota\n  const updateNote = (id, newTitle, newContent) => {\n    const updatedNotes = notes.map(note => note.id === id ? {\n      ...note,\n      title: newTitle,\n      content: newContent\n    } : note);\n    setNotes(updatedNotes);\n  };\n  const deleteNote = id => {\n    //Crea l'array con le note diverse da quella che voglio cancellare\n    setNotes(notes.filter(note => note.id !== id));\n  };\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }, [notes]); //useEffect esegue la funzione ogni volta che 'notes' cambia stato\n\n  const btnStyle = {\n    padding: \"0\",\n    width: \"40px\",\n    height: \"40px\",\n    position: \"relative\",\n    transition: \"transform 0.2s\",\n    backgroundColor: \"transparent\",\n    border: \"none\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    id: \"container\",\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-it-area\",\n      id: \"post-it-area\",\n      children: [notes.map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-it\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-btn\",\n          onClick: () => deleteNote(note.id),\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"post-it-title\",\n          value: note.title,\n          onInput: e => updateNote(note.id, e.target.value, note.content)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"post-it-content\",\n          defaultValue: note.content,\n          onInput: e => updateNote(note.id, note.title, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, note.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-post-it\",\n          ref: bgButtonRef,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"div-btn\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              ref: addBtnRef,\n              onClick: addNewNote,\n              children: /*#__PURE__*/_jsxDEV(IoMdAdd, {\n                style: btnStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(MainContainer, \"q8Vh9ZSYO6MN369/Z6smURzZ+9c=\", false, function () {\n  return [useColor];\n});\n_c = MainContainer;\nvar _c;\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useColor","darken","IoMdAdd","jsxDEV","_jsxDEV","MainContainer","_s","containerRef","bgButtonRef","addBtnRef","color","current","darkenedColor","style","backgroundColor","notes","setNotes","savedNotes","localStorage","getItem","JSON","parse","addNewNote","newNote","id","Date","now","title","content","updateNote","newTitle","newContent","updatedNotes","map","note","deleteNote","filter","setItem","stringify","btnStyle","padding","width","height","position","transition","border","className","ref","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onInput","e","target","defaultValue","_c","$RefreshReg$"],"sources":["C:/Users/gabri/OneDrive/Desktop/Zona mij/Apprendimento/React/first-project/src/Components/MyComponent.jsx"],"sourcesContent":["// src/MyComponent.jsx\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useColor } from './ColorContext';\r\nimport { darken } from 'polished';\r\nimport { IoMdAdd } from \"react-icons/io\";\r\nimport '../Css/MyComponent.css';\r\nimport '../Css/ColorPicker.css'\r\n\r\nexport function MainContainer() {\r\n\r\n  const containerRef = useRef(null);\r\n  const bgButtonRef = useRef(null);\r\n  const addBtnRef = useRef(null)\r\n  const { color } = useColor(); // Ottieni il colore dal contesto\r\n\r\n  useEffect(() => {\r\n    if (containerRef.current && bgButtonRef.current) {\r\n      const darkenedColor = darken(0.1, color);\r\n      containerRef.current.style.backgroundColor = color;\r\n      addBtnRef.current.style.backgroundColor = color;\r\n      bgButtonRef.current.style.backgroundColor = darkenedColor;\r\n    }\r\n  }, [color]);\r\n\r\n\r\n\r\n  // useState -> Stato iniziale dell'array (vuoto)\r\n  const [notes, setNotes] = useState(() => {\r\n    const savedNotes = localStorage.getItem('notes');\r\n    //Vera -> parsing delle note | falsa -> array vuoto\r\n    return savedNotes ? JSON.parse(savedNotes) : [];\r\n  });\r\n\r\n  // Funzione per aggiungere una nuova nota\r\n  const addNewNote = () => {\r\n    const newNote = { id: Date.now(), title: 'Titolo', content: 'Scrivi qui' };\r\n    setNotes([...notes, newNote]);\r\n  };\r\n\r\n  // Funzione per aggiornare una nota\r\n  const updateNote = (id, newTitle, newContent) => {\r\n    const updatedNotes = notes.map(note =>\r\n      note.id === id ? { ...note, title: newTitle, content: newContent } : note\r\n    );\r\n    setNotes(updatedNotes);\r\n  };\r\n\r\n  const deleteNote = (id) => {\r\n    //Crea l'array con le note diverse da quella che voglio cancellare\r\n    setNotes(notes.filter(note => note.id !== id));\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('notes', JSON.stringify(notes));\r\n  }, [notes]); //useEffect esegue la funzione ogni volta che 'notes' cambia stato\r\n\r\n  const btnStyle = {\r\n    padding: \"0\",\r\n    width: \"40px\",\r\n    height: \"40px\", \r\n    position: \"relative\",\r\n    transition: \"transform 0.2s\",\r\n    backgroundColor: \"transparent\",\r\n    border: \"none\"\r\n  }\r\n\r\n  return (\r\n    <div className='container' id='container' ref={containerRef}>\r\n      <div className='post-it-area' id='post-it-area'>\r\n        {notes.map((note) => (\r\n          <div key={note.id} className='post-it'>\r\n            <button className='delete-btn' onClick={() => deleteNote(note.id)}>x</button>\r\n            <input className='post-it-title' value={note.title} onInput={(e) => updateNote(note.id, e.target.value, note.content)}></input>\r\n            <textarea className='post-it-content' defaultValue={note.content} onInput={(e) => updateNote(note.id, note.title, e.target.value)}></textarea>\r\n          </div>\r\n        ))}\r\n        <div className='add-container'>\r\n          <div className='add-post-it' ref={bgButtonRef}>\r\n            <div className='div-btn'>\r\n              <button ref={addBtnRef}  onClick={addNewNote}><IoMdAdd style={btnStyle}/></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}